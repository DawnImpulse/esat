// Generated by CoffeeScript 2.4.1
(function() {
  /*
  ISC License

  Copyright 2018, Saksham (DawnImpulse)

  Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted,
  provided that the above copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE
  OR PERFORMANCE OF THIS SOFTWARE.
  */
  'use strict';
  /*
  esat
  aes256

  @author Saksham
  @note Last Branch Update - master

  @note Created on 2018-06-02 by Saksham
  @note Updates :
    Saksham - 2018 06 05 - master - minor fix in key/data
    Saksham - 2019 07 15 - master - changed deprecated encryption method
  */
  var IV_LENGTH, crypto, decrypt, encrypt, handler, utils;

  crypto = require('crypto');

  handler = require('../utils/errorHandler');

  utils = require('../utils/utilities');

  IV_LENGTH = 16;

  /*
  ----- EXPORTS -----
  */
  /*
    Used to encrypt data with its key
    @param KEY - encryption key (must be 256 bits , 32 chars)
    @param data - data to be encrypted
    @param callback - in case of promise kindly don't provide this
  */
  exports.encrypt = function(data, key, callback) {
    var encryptedData;
    if (callback) {
      encryptedData = encrypt(data, key);
      // if not an error
      if (utils.typeOf(encryptedData) === 'string') {
        return callback(void 0, encryptedData);
      } else {
        // here data is the error
        return callback(encryptedData, void 0);
      }
    } else {
      return new Promise(function(resolve, reject) {
        encryptedData = encrypt(data, key);
        // if not an error
        if (utils.typeOf(encryptedData) === 'string') {
          return resolve(encryptedData);
        } else {
          // here data is the error
          return reject(encryptedData);
        }
      });
    }
  };

  /*
    Used to decrypt data with its key
    @param KEY - encryption key (must be 256 bits , 32 chars)
    @param data - data to be decrypted
    @param callback - in case of promise kindly don't provide this
  */
  exports.decrypt = function(data, key, callback) {
    var decryptedData, error;
    if (callback) {
      try {
        decryptedData = decrypt(data, key);
        // if not an error
        if (utils.typeOf(decryptedData) === 'string') {
          return callback(void 0, decryptedData);
        } else {
          // here data is the error
          return callback(decryptedData, void 0);
        }
      } catch (error1) {
        // error decrypting
        error = error1;
        return callback(error, void 0);
      }
    } else {
      return new Promise(function(resolve, reject) {
        try {
          decryptedData = decrypt(data, key);
          // if not an error
          if (utils.typeOf(decryptedData) === 'string') {
            return resolve(decryptedData);
          } else {
            // here data is the error
            return reject(decryptedData);
          }
        } catch (error1) {
          error = error1;
          return reject(error);
        }
      });
    }
  };

  /*
  ----- PRIVATE -----
  */
  // the encryption function
  encrypt = function(data, key) {
    var cipher, encrypted, err, iv;
    try {
      iv = crypto.randomBytes(IV_LENGTH);
      cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(key), iv);
      encrypted = cipher.update(data);
      encrypted = Buffer.concat([encrypted, cipher.final()]);
      return iv.toString('hex') + ':' + encrypted.toString('hex');
    } catch (error1) {
      err = error1;
      return handler.invalidKeyLength();
    }
  };

  // aes decryption function
  decrypt = function(data, key) {
    var decipher, decrypted, encryptedText, err, iv, textParts;
    try {
      textParts = data.split(':');
      iv = Buffer.from(textParts.shift(), 'hex');
      encryptedText = Buffer.from(textParts.join(':'), 'hex');
      decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(key), iv);
      decrypted = decipher.update(encryptedText);
      decrypted = Buffer.concat([decrypted, decipher.final()]);
      return decrypted.toString();
    } catch (error1) {
      err = error1;
      // if key error then return it
      if (err.toString().indexOf("Invalid key length") > -1) {
        return handler.invalidKeyLength();
      } else {
        // throw other errors
        throw err;
      }
    }
  };

}).call(this);

//# sourceMappingURL=aes256.js.map
