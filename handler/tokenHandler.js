// Generated by CoffeeScript 2.2.3
(function() {
  /*
  ISC License

  Copyright 2018, Saksham (DawnImpulse)

  Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted,
  provided that the above copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE
  OR PERFORMANCE OF THIS SOFTWARE.
  */
  'use strict';
  /*
  esat
  tokenHandler

  @author Saksham
  @note Last Branch Update - master

  @note Created on 2018-06-02 by Saksham
  @note Updates :
    Saksham - 2018 06 05 - master - token refresh handling
  */
  /*
  ----- PRIVATE -----
  */
  var aes256, errorH, tokenRefresh, tokenVerification;

  aes256 = require('../encryption/aes256');

  errorH = require('../utils/errorHandler');

  /*
    Use to generate a new token
    @param payload - any data to save (string/number/json) - empty json by default
    @param key - the encryption key
    @param exp - the token expiry in milliseconds - 1 year by default
    @param rat - token refresh interval/at - 1 hour by default
    @param iss - token issuer
    @param aud - a single audience id
    @param callback - not needed in case of promise
  */
  exports.generateToken = function(payload, key, exp = 31540000000, rat = 3600000, iss, aud, callback) {
    var currentMilli, tokenData;
    currentMilli = (new Date).getTime(); // current time in milli from epoch
    tokenData = {
      aud: aud,
      iss: iss,
      iat: currentMilli,
      rat: currentMilli + rat,
      exp: currentMilli + exp,
      lrt: currentMilli,
      payload: payload
    };
    if (callback) {
      return aes256.encrypt(JSON.stringify(tokenData), key, callback);
    } else {
      return aes256.encrypt(JSON.stringify(tokenData), key);
    }
  };

  /*
    verify authentication token
    @param token
    @param key - decryption key
    @param audiences - the audiences array
    @param callback - not needed in case of promise
  */
  exports.verifyToken = function(token, key, audiences, callback) {
    if (callback) {
      return tokenVerification(token, key, audiences).then(function(tokenData) {
        return callback(void 0, tokenData);
      }).catch(function(error) {
        return callback(error, void 0);
      });
    } else {
      return tokenVerification(token, key, audiences);
    }
  };

  /*
    refreshing authentication token
    @param oldToken - previous interval expired token
    @param key
    @param callback - not needed in case of promise
  */
  exports.refreshToken = function(oldToken, key, callback) {
    if (callback) {
      return tokenRefresh(oldToken, key).then(function(token) {
        return callback(void 0, token);
      }).catch(function(error) {
        return callback(error, void 0);
      });
    } else {
      return tokenRefresh(oldToken, key);
    }
  };

  tokenVerification = function(token, key, audiences) {
    return new Promise(function(resolve, reject) {
      return aes256.decrypt(token, key).then(function(data) {
        var tokenData;
        tokenData = JSON.parse(data);
        if (tokenData.exp <= (new Date()).getTime()) {
          return reject(errorH.tokenExpired());
        } else if (tokenData.rat <= (new Date()).getTime()) {
          return reject(errorH.tokenRefresh());
        } else if (tokenData.aud) {
          if (!audiences) {
            return reject(errorH.audiencesNotProvided());
          } else if (audiences.indexOf(tokenData.aud) === -1) {
            return reject(errorH.invalidAudience());
          } else {
            return resolve(tokenData);
          }
        } else {
          return resolve(tokenData);
        }
      // catch for decryption
      }).catch(function(error) {
        if (error.toString().indexOf("06065064") > -1) {
          return reject(errorH.invalidKey());
        } else {
          return reject(errorH.invalidToken());
        }
      });
    });
  };

  tokenRefresh = function(token, key) {
    return new Promise(function(resolve, reject) {
      return aes256.decrypt(token, key).then(function(decoded) {
        var currentMilli, tokenData;
        currentMilli = (new Date).getTime(); // current time in milli from epoch
        decoded = JSON.parse(decoded);
        if (decoded.exp <= currentMilli) {
          return reject(errorH.tokenExpired());
        } else {
          tokenData = {
            aud: decoded.aud,
            iss: decoded.iss,
            iat: decoded.iat,
            rat: currentMilli + (decoded.rat - decoded.iat),
            exp: decoded.exp,
            lrt: currentMilli,
            payload: decoded.payload
          };
          return aes256.encrypt(JSON.stringify(tokenData), key).then(function(tokenR) {
            return resolve(tokenR);
          });
        }
      }).catch(function(error) {
        if (error.toString().indexOf("06065064") > -1) {
          return reject(errorH.invalidKey());
        } else {
          return reject(errorH.invalidToken());
        }
      });
    });
  };

}).call(this);

//# sourceMappingURL=tokenHandler.js.map
